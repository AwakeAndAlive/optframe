<?xml version="1.0" encoding="UTF-8"?>

<!--

COPY TO: /usr/share/gtksourceview-3.0/language-specs/
ALSO TO: /usr/share/gtksourceview-2.0/language-specs/

OptFrame Script Language

Syntax for .opt files

Author: Igor Machado Coelho
Date:   Jan./2013

-->

<language id="opt" _name="OptFrame Script Language2" version="2.0" _section="Scripts">
  <metadata>
    <property name="mimetypes">text/x-opt</property>
    <property name="globs">*.opt</property>
    <property name="line-comment-start">%</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="variable"          _name="Variable"              map-to="def:identifier"/>
    <style id="type"              _name="Type"                  map-to="def:type"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
    <style id="special"           _name="Special char"          map-to="def:special-char"/>
  </styles>

  <definitions>

   <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>%</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="var" style-ref="variable">
      <match>[$]+[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="backwards-curly-var" style-ref="variable">
       <start>\${</start>
       <end>}</end>
    </context>
<!--
    <context id="curly-var" style-ref="variable" >
       <start>{(?=\$)</start>
       <end>}</end>
    </context>
-->


<!--
    <context id="lists" style-ref="special">
      <start>\[</start>
      <end>\]</end>
    </context>
-->

    <context id="list-brackets" style-ref="special">
      <match>(\[|\])</match>
    </context>

    <context id="function-brackets" style-ref="special">
      <match>(\(|\))</match>
    </context>

<!--
    <context id="close-block-error" style-ref="error">
      <match>\}(?!\{)</match>
    </context>
-->


    <context id="use-minus" style-ref="keyword">
      <match>[ ]+[-]+[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="module" style-ref="keyword">
      <match>^[ ]*[a-zA-Z_][a-zA-Z0-9_\.]*</match>
    </context>

    <context id="function" style-ref="special">
      <match>([a-zA-Z_]*\()</match>
    </context>

    <context id="component-families" style-ref="type">
      <match>OptFrame:[a-zA-Z_:]*</match>
    </context>

    <context id="commands" style-ref="keyword">
      <keyword>if</keyword>
      <keyword>else</keyword>
      <keyword>for</keyword>
      <keyword>for_each</keyword>
      <keyword>while</keyword>
      <keyword>try</keyword>
      <keyword>except</keyword>
      <keyword>exit</keyword>
    </context>



    <!--regexs-->
    <define-regex id="preproc-start">^\s*#\s*</define-regex>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <!--contexts NOT used on the main context-->
    <!-- TODO: what about scanf ? -->
    <!-- man 3 printf -->
    <context id="printf" style-ref="printf" extend-parent="false">
      <match extended="true">
        \%\%|\%
        (?:[1-9][0-9]*\$)?      # argument
        [#0\-\ \+\'I]*          # flags
        (?:[1-9][0-9]*|\*)?     # width
        (?:\.\-?(?:[0-9]+|\*))? # precision
        (?:hh|ll|[hlLqjzt])?    # length modifier
        [diouxXeEfFgGaAcsCSpnm] # conversion specifier
      </match>
    </context>
    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="printf"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        [0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <!--Main context-->
    <context id="opt" class="no-spell-check">
      <include>
        <context ref="line-comment"/>
        <context ref="var"/>

        <!-- <context ref="curly-var"/> -->
        <context ref="backwards-curly-var"/>
        <!-- <context ref="lists"/> -->
        <context ref="list-brackets"/>
        <!-- <context ref="close-block-error"/> -->
        <context ref="function-brackets"/>
        <context ref="function"/>
        <context ref="module"/>

        <context ref="commands"/>

        <context ref="component-families"/>

        <context ref="use-minus"/>

        <context ref="string"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="boolean"/>

      </include>
    </context>

  </definitions>
</language>

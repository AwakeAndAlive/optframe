// OptFrame 4.2 - Optimization Framework
// Copyright (C) 2009-2021 - MIT LICENSE
// https://github.com/optframe/optframe
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// ===================================
// Main.cpp file generated by OptFrame
// Project Traveling Salesman Problem
// ===================================

#include <math.h>
#include <stdlib.h>

#include <iostream>

using namespace std;

#include <set>

#include "OptHScheduling.h"
#include <OptFrame/Loader.hpp>

using namespace OptHS;
using namespace scannerpp;

int
main(int argc, char** argv)
{
   Loader<RepOptHS, OPTFRAME_DEFAULT_ADS, SolutionOptHS> loader;
   OptHSProblemCommand opths;
   //optframe.execute("system.read ../definitions.opt");
   //optframe.execute("problem.OptHS load Y Z M B E J");
   //optframe.execute("component.exec_constructive $Constructive 0  sol-random");
   //optframe.execute("evaluate $Evaluator 0 $sol-random");
   //optframe.execute("print $sol-random");
   //optframe.execute("component.create_list [ OptFrame:NS 0 ] OptFrame:NS ns_list");
   //optframe.execute("component.build OptFrame:LocalSearch:LAHC $Evaluator 0  $ns_list 1000 10000 50 my_lahc");
   //optframe.execute("component.exec_local_search 0 30  $sol-random  $my_lahc  best-solution  time");
   //optframe.execute("echo found best solution in $time milliseconds");
   //optframe.execute("evaluate $Evaluator 0 $best-solution");
   //optframe.execute("to_string $best-solution bs_str");
   //optframe.execute("echo $bs_str");

   cout << "Program ended successfully" << endl;

   return 0;
}

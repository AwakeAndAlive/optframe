// OptFrame - Optimization Framework

// Copyright (C) 2009, 2010, 2011
// Igor Machado - Mario Henrique Perche - Pablo Munhoz - Sabir Ribas
//
// This file is part of the OptFrame optimization framework. This framework
// is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License v3 as published by the
// Free Software Foundation.

// This framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License v3 for more details.

// You should have received a copy of the GNU Lesser General Public License v3
// along with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
// USA.

// ===================================
// Main.cpp file generated by OptFrame
// Project Eternity II
// ===================================

#include <stdlib.h>
#include <math.h>

#include <iostream>

using namespace std;

#include <set>

#include "../OptFrame/OptFrame.hpp"
#include "EternityII.h"

int main(int argc, char **argv)
{
	srand(time(NULL));
	RandGen rg(time(NULL));

	Scanner scanner(new File("./Examples/EternityII/pieces_set_2/pieces_03x03.txt"));

	EtIIProblemInstance* p = new EtIIProblemInstance(scanner);

	EtIIInitialSolutionGreedy& is = * new EtIIInitialSolutionGreedy(*p,rg);

	SolutionEtII& s = is.generateSolution();

	NSSeqRotate& nsRotate = * new NSSeqRotate(rg);
	NSSeqSwapCenter& nsSwapCenter = * new NSSeqSwapCenter(rg);
	NSSeqSwapCorner& nsSwapCorner = * new NSSeqSwapCorner(rg);
	NSSeqSwapRotateCenter& nsSwapRotateCenter = * new NSSeqSwapRotateCenter(rg);
	NSSeqSwapSide& nsSwapSide = * new NSSeqSwapSide(rg);

	s.print();

	EtIIEvaluator& eval = * new EtIIEvaluator(*p);
	EvaluationEtII* e;

	e = &eval.evaluate(s);

	e->print();
	cout << endl;

	OptFrame<RepEtII, MemEtII> optframe(rg);
	optframe.factory.add_initsol(&is);
	optframe.factory.add_ev(&eval);
	optframe.factory.add_ns(&nsRotate);
	optframe.factory.add_ns(&nsSwapCenter);
	optframe.factory.add_ns(&nsSwapCorner);
	optframe.factory.add_ns(&nsSwapRotateCenter);
	optframe.factory.add_ns(&nsSwapSide);
	optframe.execute();

	cout << "Program ended successfully" << endl;

	return 0;
}

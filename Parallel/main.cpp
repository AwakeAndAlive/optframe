//Rename to mainTSP.cpp to run the example

// ===================================
// Main.cpp file generated by OptFrame
// Project Traveling Salesman Problem
// ===================================

#define MaPI

#include <stdlib.h>
#include <math.h>

#include <iostream>

using namespace std;

#include <set>

#include "../OptFrame/OptFrame.hpp"
#include "../OptFrame/Examples/TSP.h"
#include "../OptFrame/Util/VShuffle.hpp"

int main(int argc, char **argv)
{
	// Optimal value for berlin52 is 7542

	RandGen rg;

	Scanner scanner(new File("../OptFrame/Examples/TSP/tsplib/berlin52.txt"));

	TSPProblemInstance* p = new TSPProblemInstance(scanner);

	TSPEvaluator eval(p);

	// MapReduce declaration
	MaPI_MapReduce<RepTSP, RankAndStop, int, pair<RepTSP, double> , RepTSP> mapReduce;
	TSPSerializer serializer;
	MyMaPIMapper<RepTSP, MemTSP> mapper(&mapReduce, &serializer, eval);
	MyMaPIReducer<RepTSP, MemTSP> reducer(&mapReduce, &serializer, eval);

	srand(clock() + mapReduce.getMPIRank()); // Setting seed according to mpi rank

	RandomInitialSolutionTSP is(p, rg);

	SolutionTSP& s = is.generateSolution();
	s.print();
	EvaluationTSP * e = &eval.evaluate(s);
	e->print();
	cout << endl;

	OptFrame<RepTSP, MemTSP> optframe(rg);
	optframe.factory.add_initsol(&is);
	optframe.factory.add_ev(&eval);
	optframe.factory.add_ns(new NSEnumSwap(p, rg));
	optframe.factory.add_method(new VShuffle<RepTSP, MemTSP> );

	// Adding MapReduce to factory
	optframe.factory.setMapReduce(&serializer, &mapReduce, &mapper, &reducer, argc, argv);

	optframe.execute("read example.opt");

	cout << "Program ended successfully" << endl;

	return 0;
}

// OptFrame - Optimization Framework

// Copyright (C) 2009-2015
// http://optframe.sourceforge.net/
//
// This file is part of the OptFrame optimization framework. This framework
// is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License v3 as published by the
// Free Software Foundation.

// This framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License v3 for more details.

// You should have received a copy of the GNU Lesser General Public License v3
// along with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
// USA.

// ===================================
// Main.cpp file generated by OptFrame
// Project Eternity II
// ===================================

#include <math.h>
#include <stdlib.h>

#include <iostream>

using namespace std;

#include <set>

#include "EternityII.h"
#include <OptFrame/Loader.hpp>

#include <filesystem> // c++17 std::filesystem::current_path

using namespace EtII;

// gets real file path, if file exists, or empty string, if not
std::string
resolvePath(std::string sinstance, std::string appPath, std::string bazelPackage = "")
{
   // try relative path
   if (std::filesystem::exists(sinstance))
      return sinstance;

   // load file from absolute directory that contains executable
   std::filesystem::path exec = appPath;
   std::string full_instance = exec.parent_path().string() + std::string("/") + sinstance;
   //std::cout << "loading instance at '" << full_instance << "'" << std::endl;
   if (std::filesystem::exists(full_instance))
      return full_instance;

   // try .runfiles directory extension (bazel build for external bazel package)
   full_instance = exec.string() + std::string(".runfiles/") + std::string(bazelPackage) + std::string("/") + sinstance;
   if (std::filesystem::exists(full_instance))
      return full_instance;

   // instance not found
   return "";
}

int
main(int argc, char** argv)
{
   //std::cout << "0: " << argv[0] << std::endl;
   //std::cout << "dir: " << std::filesystem::current_path() << std::endl;

   std::string sinstance = "pieces_set_2/pieces_10x10.txt";

   std::string good_path = resolvePath(sinstance, argv[0], "EternityII");

   if (good_path == "") {
      std::cerr << "Instances not found in executable directory. Aborting." << std::endl;
      return 1; // cannot open file
   }

   Loader<RepEtII, OPTFRAME_DEFAULT_ADS, SolutionEtII> optframe;
   EtIIProblemCommand etii;
   etii.load(good_path, optframe.factory, optframe.dictionary, optframe.ldictionary);

   cout << "Program ended successfully" << endl;

   return 0;
}

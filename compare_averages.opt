
system.read definitions.opt

echo TRUTH TABLE
echo logic( not true  )
echo logic( not false )
echo
echo logic( true  and true  )
echo logic( true  and false )
echo logic( false and true  )
echo logic( false and false )
echo
echo logic( true  or true  )
echo logic( true  or false )
echo logic( false or true  )
echo logic( false or false )
echo END TRUTH TABLE
echo

define total  10
define inicio 1
echo teste while:
while compare( $inicio < $total )
{
  echo $inicio;
  silent_define inicio compute( $inicio + 1 );
}
echo fim while
echo

define mylist1 [1, 2, 3, 4, 5 ,6]
define shapiro1 shapiro_test( $mylist1 ) 
if compare( $shapiro1 <= 0.05 )
{
  echo NAO NORMAL!
} else 
{
  echo NORMAL
}

define mylist2 [7,8,9,10,11,12,13,14,15,16]
define shapiro2 shapiro_test( $mylist2 ) 
if compare( $shapiro2 <= 0.05 )
{
  echo NAO NORMAL!
} else
{
  echo NORMAL
}

define pvalue student_t_test( $mylist1  $mylist2  )

if compare( $pvalue <= 0.05 )
{
  echo DIFERENTES!
} else
{
  echo IGUAIS
}


define pvalue2 paired_t_test( [1, 1.4, 1.6, 500] [3.9, 2.8, 1.2, 1000]  )
define pvalue2 wilcoxon_test( [1, 1.4, 1.6, 500] [3.9, 2.8, 1.2, 1000]  )


define pvalue anova( [ [1, 1.4, 1.6, 500] , [0, 1.3, 1.4, 1000] , [ 5, 10 , 20 , 4000 ] ] )
define pvalue friedman_test( [ i1, i2, i3, i4 ] [ [1, 1.4, 1.6, 500] , [0, 1.3, 1.4, 1000] , [ 5, 10 , 20 , 4000 ] ] )

define pvalue_noblock friedman_noblock_test([ [1, 1.4, 1.6, 500] , [0, 1.3, 1.4, 1000] , [ 5, 10 , 20 , 4000 ] ] )

pause

if compare( $pvalue <= 0.05 )
{
  echo DIFERENTES!
} else
{
  echo IGUAIS
}

undefine pvalue



file.to_list average0 average0.txt
file.to_list average1 average1.txt
file.to_list average_ref average_reference.txt

create_numeric_list 1 length( average0 ) l_average0
create_numeric_list 1 length( average1 ) l_average1
create_numeric_list 1 length( average_ref ) l_average_ref

silent_define_list value_avg0 [ ]
for_each $k l_average0
{
  silent_define_list line words( element( $k average0 ) );
  silent_define new_value_avg0 element( 2 line );
  silent_define ref element( $k average_ref );
  silent_define_list value_avg0_2 append( value_avg0 [ compute( compute( compute( $ref - $new_value_avg0 ) / abs( $ref ) ) * 100 ) ] );
  %echo TESTANDO NORMALIDADE AVG0 $k : shapiro_test( value_avg0 );
  %echo value_avg0;
  %undefine value_avg0;
  silent_define_list value_avg0 value_avg0_2;
  %undefine new_value_avg0_2;
}

silent_define_list value_avg1 [ ]
for_each $k l_average1
{
  silent_define_list line words( element( $k average1 ) );
  silent_define new_value_avg1 element( 2 line );
  silent_define ref element( $k average_ref );
  silent_define_list value_avg1_2 append( value_avg1 [ compute( compute( compute( $ref - $new_value_avg1 ) / abs( $ref ) ) * 100 ) ] );
  %echo TESTANDO NORMALIDADE AVG1 $k : shapiro_test( value_avg1 ),
  %echo value_avg1,
  %undefine value_avg1,
  silent_define_list value_avg1 value_avg1_2;
  %undefine new_value_avg1_2
}

%echo value_avg0
echo length( value_avg0 )

%echo value_avg1
echo length( value_avg1 )

echo TESTANDO NORMALIDADE:
echo p-value: shapiro_test( value_avg0 )
if compare( shapiro_test( value_avg0  ) > 0.05 )
{
  echo NORMAL
} else
{
  echo NAO EH NORMAL
}

echo p-value: shapiro_test( value_avg1 )
if compare( shapiro_test( value_avg1  ) > 0.05 )
{
  echo NORMAL
} else
{
  echo NAO EH NORMAL
}


define pvalue friedman_noblock_test( [ value_avg0 , value_avg1 ]  )
%define pvalue friedman_noblock_test( [ [1, 1.2, 1.4, 1.6] , [2, 2.2, 2.4, 2.6] , [3, 3.2, 3.4, 3.6 ] ]  )
%define pvalue friedman_noblock_test( [ [1, 1.2, 1.4, 1.6] , [2, 2.2, 2.4, 2.6]  ]  )

echo MEDIAS: avg( value_avg0 ) e avg( value_avg1 )

if compare( $pvalue <= 0.05 )
{
  echo DIFERENTE!
} else
{
  echo IGUAIS
}
